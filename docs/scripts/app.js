/******/!function(t){function e(o){if(n[o])return n[o].exports;var i=n[o]={exports:{},id:o,loaded:!1};return t[o].call(i.exports,i,i.exports,e),i.loaded=!0,i.exports}// webpackBootstrap
/******/
var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){"use strict";function o(t){return t&&t.__esModule?t:{"default":t}}n(1);var i=n(7),r=o(i);angular.module("angularjsExampleDropdownTree",["angularjsDropdownTree"]).component("main",(0,r["default"])())},function(t,e,n){"use strict";function o(t){return t&&t.__esModule?t:{"default":t}}n(2);var i=n(5),r=o(i);angular.module("angularjsDropdownTree",["dropdownTreeOptionRowModule"]).component("dropdownTree",(0,r["default"])())},function(t,e,n){"use strict";function o(t){return t&&t.__esModule?t:{"default":t}}var i=n(3),r=o(i);angular.module("dropdownTreeOptionRowModule",[]).component("dropdownTreeOptionRow",(0,r["default"])())},function(t,e,n){"use strict";function o(t){return t&&t.__esModule?t:{"default":t}}function i(){var t={controller:l["default"],templateUrl:"app/component/option-row/option-row.template.html",bindings:{option:"<",settings:"<",optionClicked:"&",selectedOptions:"<"}};return t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i;var r=n(4),l=o(r)},function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}(),i=function(){function t(){n(this,t)}return o(t,[{key:"getDisplayText",value:function(){return this.option[this.settings.displayProperty]}},{key:"isFolder",value:function(){return Object.prototype.hasOwnProperty.call(this.option,this.settings.childrenProperty)&&angular.isArray(this.option[this.settings.childrenProperty])}},{key:"getChildOptions",value:function(){return this.option[this.settings.childrenProperty]}},{key:"innerClicked",value:function(t){this.optionClicked(t)}},{key:"isSelected",value:function(){return this.selectedOptions.indexOf(this.option)>=0}}]),t}();e["default"]=i},function(t,e,n){"use strict";function o(t){return t&&t.__esModule?t:{"default":t}}function i(){var t={controller:l["default"],templateUrl:"app/component/dropdownTree.template.html",bindings:{options:"<",externalTexts:"<?texts",externalSelection:"<?selection",externalSettings:"<?settings",selectionChanged:"&"}};return t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i;var r=n(6),l=o(r)},function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}(),i=function(){function t(e){"ngInject";n(this,t),this.$log=e}return t.$inject=["$log"],o(t,[{key:"$onInit",value:function(){this.open=!1,this.selectedOptions=[],this.texts={optionNames:"items"},this.settings={displayProperty:"name",childrenProperty:"children",selectedClass:["glyphicon","glyphicon-ok"]}}},{key:"$onChanges",value:function(t){angular.isDefined(t.externalTexts)&&angular.extend(this.texts,this.externalTexts),angular.isDefined(t.externalSelection)&&(angular.isArray(t.externalSelection)?(this.selectedOptions=t.externalSelection,this.emitSelection()):this.$log.error("selection should be an array")),angular.isDefined(t.settings)&&angular.extend(this.settings,t.settings)}},{key:"toggleDropdown",value:function(){this.open=!this.open}},{key:"optionClicked",value:function(t){var e=this.selectedOptions.indexOf(t);e>=0?this.selectedOptions.splice(e,1):this.selectedOptions.push(t),this.emitSelection()}},{key:"emitSelection",value:function(){this.selectionChanged({selection:this.selectedOptions})}}]),t}();e["default"]=i},function(t,e,n){"use strict";function o(t){return t&&t.__esModule?t:{"default":t}}function i(){var t={templateUrl:"app/main/main.template.html",controller:l["default"]};return t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i;var r=n(8),l=o(r)},function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}(),i=function(){function t(e){"ngInject";n(this,t),this.$log=e}return t.$inject=["$log"],o(t,[{key:"$onInit",value:function(){this.options=[{name:"testoption"},{name:"test folder",children:[{name:"test child option"}]}]}},{key:"selectionChanged",value:function(t){this.$log.debug(t)}}]),t}();e["default"]=i}]),angular.module("angularjsExampleDropdownTree").run(["$templateCache",function(t){t.put("app/component/dropdownTree.template.html",'<div class=dropdown ng-class="[\r\n			{\'open\': $ctrl.open}\r\n		 ]"><div class="dropdown-toggle btn btn-default" ng-click=$ctrl.toggleDropdown()><span ng-if="$ctrl.selectedOptions.length === 0">Select {{$ctrl.texts.optionNames}} </span><span ng-if="$ctrl.selectedOptions.length > 0">{{$ctrl.selectedOptions.length}} {{$ctrl.texts.optionNames}} selected</span></div><div ng-if=$ctrl.open class=dropdown-menu><ul><dropdown-tree-option-row ng-repeat="option in $ctrl.options track by $index" option=option settings=$ctrl.settings option-clicked=$ctrl.optionClicked(innerOption) selected-options=$ctrl.selectedOptions></dropdown-tree-option-row></ul></div></div>'),t.put("app/main/main.template.html","<header><div class=container><a href=https://github.com/pkempenaers/angularjs-dropdown-tree class=\"btn btn-info pull-right gh-button-link\"><strong>View project on<br>GitHub</strong></a><h1>AngularJS Dropdown Tree</h1></div></header><section class=container><p>AngularJS dropdown tree is a dropdown selection component specificaly build for options that can be ordered in a tree structure. On this page you can find a simple example and some documentation on how to configure the component.</p><div><h2>Examlpe</h2><dropdown-tree options=$ctrl.options selection-changed=$ctrl.selectionChanged(selection)></dropdown-tree></div><div><h2>Documentation</h2><div><h3>Overview of attributes</h3><table class=\"table table-bordered\"><thead><tr><td>Name</td><td>Required</td><td>Type</td><td>Use</td></tr></thead><tbody><tr><td>options</td><td>Yes</td><td>Array of Objects</td><td>The selectable options</td></tr><tr><td>selection-changed</td><td>Yes</td><td>function(selection)</td><td>Will be called every time the selection changes.</td></tr><tr><td>settings</td><td>No</td><td>Object</td><td>Configures the component</td></tr><tr><td>selection</td><td>No</td><td>Array of Objects</td><td>Can be used to set the selection externaly, all objects in the array should also be in the options Array.</td></tr><tr><td>texts</td><td>No</td><td>Object</td><td>Configures the static texts in the component</td></tr></tbody></table></div><div><h3>Options</h3><p>Should be an array of objects with a name (or a property that can be used as a name), and optionaly an array of child objects with the same structure.</p></div><div><h3>Settings</h3><p>An object used to configure the component, all the properties are optional.</p><table class=\"table table-bordered\"><thead><tr><td>Name</td><td>Default value</td><td>Type</td><td>Use</td></tr></thead><tbody><tr><td>displayProperty</td><td>'name'</td><td>string</td><td>The property of the option that should be used to display it.</td></tr><tr><td>childrenProperty</td><td>'children'</td><td>string</td><td>The property that holds the child options.</td></tr><tr><td>selectedClass</td><td>['glyphicon', 'glyphicon-ok']</td><td>string or array of string</td><td>When an option is selcted a span is added with the classes configured</td></tr></tbody></table></div><div><h3>Texts</h3><p>An object used to configure the texts used in the component, all the properties are optional and strings.</p><table class=\"table table-bordered\"><thead><tr><td>Name</td><td>Default value</td><td>Use</td></tr></thead><tbody><tr><td>optionNames</td><td>'items'</td><td>Used in the dropdown-toggle to indicate what needs to be selected.</td></tr></tbody></table></div></div></section>"),t.put("app/component/option-row/option-row.template.html",'<li><div class=option ng-class="[\r\n				{\'folder\': $ctrl.isFolder()},\r\n			 ]"><div class=title ng-click="$ctrl.innerClicked({innerOption: $ctrl.option})"><span ng-if=$ctrl.isSelected() ng-class=$ctrl.settings.selectedClass></span> {{$ctrl.getDisplayText()}}</div><ul class=children ng-if=$ctrl.isFolder()><dropdown-tree-option-row ng-repeat="option in $ctrl.getChildOptions() track by $index" option=option settings=$ctrl.settings option-clicked="$ctrl.innerClicked({innerOption: option})" selected-options=$ctrl.selectedOptions></dropdown-tree-option-row></ul></div></li>')}]);
//# sourceMappingURL=../maps/scripts/app.js.map
