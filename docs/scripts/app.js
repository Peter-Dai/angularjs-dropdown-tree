/******/!function(t){function e(o){if(n[o])return n[o].exports;var i=n[o]={exports:{},id:o,loaded:!1};return t[o].call(i.exports,i,i.exports,e),i.loaded=!0,i.exports}// webpackBootstrap
/******/
var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){"use strict";function o(t){return t&&t.__esModule?t:{"default":t}}n(1);var i=n(7),s=o(i);angular.module("angularjsExampleDropdownTree",["angularjsDropdownTree"]).component("main",(0,s["default"])())},function(t,e,n){"use strict";function o(t){return t&&t.__esModule?t:{"default":t}}n(2);var i=n(5),s=o(i);angular.module("angularjsDropdownTree",["dropdownTreeOptionRowModule"]).component("dropdownTree",(0,s["default"])())},function(t,e,n){"use strict";function o(t){return t&&t.__esModule?t:{"default":t}}var i=n(3),s=o(i);angular.module("dropdownTreeOptionRowModule",[]).component("dropdownTreeOptionRow",(0,s["default"])())},function(t,e,n){"use strict";function o(t){return t&&t.__esModule?t:{"default":t}}function i(){var t={controller:r["default"],templateUrl:"app/component/option-row/option-row.template.html",bindings:{option:"<",settings:"<",selectedOptions:"<",optionClicked:"&",focusNext:"&",focusPrevious:"&",catchKeydown:"&",searchText:"@"}};return t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i;var s=n(4),r=o(s)},function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}(),i=function(){function t(){n(this,t),this.isFolder()&&(this.isOpen=!0)}return o(t,[{key:"getDisplayText",value:function(){return this.option[this.settings.displayProperty]}},{key:"isFolder",value:function(){return Object.prototype.hasOwnProperty.call(this.option,this.settings.childrenProperty)&&angular.isArray(this.option[this.settings.childrenProperty])}},{key:"getChildOptions",value:function(){return this.option[this.settings.childrenProperty]}},{key:"innerClicked",value:function(t){this.optionClicked(t)}},{key:"isSelected",value:function(){return this.selectedOptions.indexOf(this.option)>=0}},{key:"toggleFolder",value:function(){this.isOpen=!this.isOpen}},{key:"shouldBeVisible",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.option;return e[this.settings.childrenProperty]&&!this.shouldBeVisibleItem(e)?this.option[this.settings.childrenProperty].some(function(e){return t.shouldBeVisible(e)}):this.shouldBeVisibleItem(e)}},{key:"shouldBeVisibleItem",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.option;return this.searchText.length>0?t[this.settings.displayProperty].toLowerCase().indexOf(this.searchText.trim().toLowerCase())>=0:!0}},{key:"keyDown",value:function(t){switch(t.key){case"Enter":(!this.isFolder()||this.settings.folderSelectable)&&(this.innerClicked({innerOption:this.option}),t.preventDefault());break;case"ArrowDown":this.focusNext(),t.preventDefault();break;case"ArrowUp":this.focusPrevious(),t.preventDefault();break;default:this.catchKeydown({event:t})}}}]),t}();e["default"]=i},function(t,e,n){"use strict";function o(t){return t&&t.__esModule?t:{"default":t}}function i(){var t={controller:r["default"],templateUrl:"app/component/dropdownTree.template.html",bindings:{options:"<",externalTexts:"<?texts",externalSelection:"<?selection",externalSettings:"<?settings",selectionChanged:"&"}};return t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i;var s=n(6),r=o(s)},function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}(),i=function(){function t(e,o,i,s){"ngInject";n(this,t),this.$log=e,this.$document=o,this.$element=i,this.$rootScope=s,this.open=!1,this.selectedOptions=[],this.focusCounter=0,this.texts={optionNames:"items"},this.settings={displayProperty:"name",childrenProperty:"children",disableSearch:!1,closeOnBlur:!0,folderSelectable:!0,selectedClass:["glyphicon","glyphicon-ok"],folderClass:["glyphicon","glyphicon-folder-open"],folderClosedClass:["glyphicon","glyphicon-folder-close"],childClass:["glyphicon","glyphicon-file"]}}return t.$inject=["$log","$document","$element","$rootScope"],o(t,[{key:"$onChanges",value:function(t){angular.isDefined(t.externalTexts)&&angular.extend(this.texts,this.externalTexts),angular.isDefined(t.externalSelection)&&(angular.isArray(t.externalSelection)?(this.selectedOptions=this.externalSelection,this.emitSelection()):this.$log.error("selection should be an array")),angular.isDefined(t.externalSettings)&&angular.extend(this.settings,this.externalSettings)}},{key:"toggleDropdown",value:function(){this.open=!this.open,this.open&&this.settings.closeOnBlur&&(this.closeToggleOnBlurBinded=this.toggleOnBlur.bind(this),this.$document.on("click",this.closeToggleOnBlurBinded))}},{key:"toggleOnBlur",value:function(t){var e=this;if(t.target&&t.target.parentElement){for(var n=t.target.parentElement,o=!1;angular.isDefined(n)&&null!==n&&!o;)n.className.split&&n.className.split(" ").indexOf("dropdown-tree-parent")>=0&&!o&&n===this.$element.children()[0]&&(o=!0),n=n.parentElement;o||this.$rootScope.$apply(function(){e.toggleDropdown(),e.$document.off("click",e.closeToggleOnBlurBinded)})}}},{key:"optionClicked",value:function(t){var e=this.selectedOptions.indexOf(t);e>=0?this.selectedOptions.splice(e,1):this.selectedOptions.push(t),this.emitSelection()}},{key:"emitSelection",value:function(){this.selectionChanged({selection:this.selectedOptions})}},{key:"dropdownToggleKeyDown",value:function(t){switch(t.key){case"ArrowDown":this.open&&(this.focusFirst(),t.preventDefault());break;default:this.catchKeyDown(t)}}},{key:"searchKeydown",value:function(t){switch(t.key){case"ArrowDown":this.focusNext(),t.preventDefault();break;case"ArrowUp":this.focusSelf(),t.preventDefault();break;default:this.catchKeyDown(t)}}},{key:"catchKeyDown",value:function(t){switch(t.key){case"Escape":this.open&&(this.toggleDropdown(),this.focusSelf(),t.preventDefault())}}},{key:"focusFirst",value:function(){this.settings.disableSearch?(this.$element.find("label")[0].focus(),this.focusCounter=0):(this.$element.find("input")[0].focus(),this.focusCounter=-1)}},{key:"focusNext",value:function(){var t=this.$element.find("label");t.length>this.focusCounter+1&&(this.focusCounter+=1,t[this.focusCounter].focus())}},{key:"focusPrevious",value:function(){var t=this.$element.find("label");this.focusCounter>=1?(this.focusCounter-=1,t[this.focusCounter].focus()):this.settings.disableSearch?this.focusSelf():this.focusFirst()}},{key:"focusSelf",value:function(){this.$element.find("button")[0].focus()}}]),t}();e["default"]=i},function(t,e,n){"use strict";function o(t){return t&&t.__esModule?t:{"default":t}}function i(){var t={templateUrl:"app/main/main.template.html",controller:r["default"]};return t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i;var s=n(8),r=o(s)},function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}(),i=function(){function t(e){"ngInject";n(this,t),this.$log=e}return t.$inject=["$log"],o(t,[{key:"$onInit",value:function(){this.options=[{name:"testoption"},{name:"test folder",children:[{name:"test child option"}]}],this.settings={}}},{key:"selectionChanged",value:function(t){this.$log.debug(t)}}]),t}();e["default"]=i}]),angular.module("angularjsExampleDropdownTree").run(["$templateCache",function(t){t.put("app/component/dropdownTree.template.html",'<div class="dropdown dropdown-tree-parent" ng-class="[\r\n			{\'open\': $ctrl.open}\r\n		 ]"><button class="dropdown-toggle btn btn-default" ng-click=$ctrl.toggleDropdown() ng-keydown=$ctrl.dropdownToggleKeyDown($event)><span ng-if="$ctrl.selectedOptions.length === 0">Select {{$ctrl.texts.optionNames}} </span><span ng-if="$ctrl.selectedOptions.length > 0">{{$ctrl.selectedOptions.length}} {{$ctrl.texts.optionNames}} selected</span></button><div ng-if=$ctrl.open class=dropdown-menu><div class="top-menu form-group" ng-if=!$ctrl.settings.disableSearch><input class=form-control ng-if=!$ctrl.settings.disableSearch type=text ng-model=$ctrl.searchText placeholder=Search ng-keydown=$ctrl.searchKeydown($event)></div><ul><dropdown-tree-option-row ng-repeat="option in $ctrl.options track by $index" option=option settings=$ctrl.settings option-clicked=$ctrl.optionClicked(innerOption) selected-options=$ctrl.selectedOptions focus-next=$ctrl.focusNext() focus-previous=$ctrl.focusPrevious() catch-keydown=$ctrl.catchKeyDown(event) search-text={{$ctrl.searchText}}></dropdown-tree-option-row></ul></div></div>'),t.put("app/main/main.template.html","<header><div class=container><a href=https://github.com/pkempenaers/angularjs-dropdown-tree class=\"btn btn-info pull-right gh-button-link\"><strong>View project on<br>GitHub</strong></a><h1>AngularJS Dropdown Tree</h1></div></header><section class=container><p>AngularJS dropdown tree is a dropdown selection component specificaly build for options that can be ordered in a tree structure. On this page you can find a simple example and some documentation on how to configure the component.</p><div><h2>Examlpe</h2><dropdown-tree options=$ctrl.options selection-changed=$ctrl.selectionChanged(selection) settings=$ctrl.settings></dropdown-tree></div><div><h2>Documentation</h2><div><h3>Overview of attributes</h3><table class=\"table table-bordered\"><thead><tr><td>Name</td><td>Required</td><td>Type</td><td>Use</td></tr></thead><tbody><tr><td>options</td><td>Yes</td><td>Array of Objects</td><td>The selectable options</td></tr><tr><td>selection-changed</td><td>Yes</td><td>function(selection)</td><td>Will be called every time the selection changes.</td></tr><tr><td>settings</td><td>No</td><td>Object</td><td>Configures the component</td></tr><tr><td>selection</td><td>No</td><td>Array of Objects</td><td>Can be used to set the selection externaly, all objects in the array should also be in the options Array.</td></tr><tr><td>texts</td><td>No</td><td>Object</td><td>Configures the static texts in the component</td></tr></tbody></table></div><div><h3>Options</h3><p>Should be an array of objects with a name (or a property that can be used as a name), and optionaly an array of child objects with the same structure.</p></div><div><h3>Settings</h3><p>An object used to configure the component, all the properties are optional.</p><table class=\"table table-bordered\"><thead><tr><td>Name</td><td>Default value</td><td>Type</td><td>Use</td></tr></thead><tbody><tr><td>displayProperty</td><td>'name'</td><td>string</td><td>The property of the option that should be used to display it.</td></tr><tr><td>childrenProperty</td><td>'children'</td><td>string</td><td>The property that holds the child options.</td></tr><tr><td>selectedClass</td><td>['glyphicon', 'glyphicon-ok']</td><td>string or array of string</td><td>When an option is selcted a span is added with the classes configured</td></tr><tr><td>folderClass</td><td>['glyphicon', 'glyphicon-folder-open']</td><td>string or array of strings</td><td>Class of the span before the name of an option when the option is a folder and the folder is opened</td></tr><tr><td>folderClosedClass</td><td>['glyphicon', 'glyphicon-folder-close']</td><td>string or array of strings</td><td>Class of the span before the name of an option when the option is a folder and the folder is closed</td></tr><tr><td>childClass</td><td>['glyphicon', 'glyphicon-file']</td><td>string or array of strings</td><td>Class of the span before the name of an option when the option is not a folder</td></tr><tr><td>closeOnBlur</td><td>true</td><td>boolean</td><td>When true will close the dropdown when clicked outside of it.</td></tr><tr><td>folderSelectable</td><td>true</td><td>boolean</td><td>When true a folder is selectable otherwise only children can be selected</td></tr><tr><td>disableSearch</td><td>false</td><td>boolean</td><td>When false an input field that enables filtering the options will be available</td></tr></tbody></table></div><div><h3>Texts</h3><p>An object used to configure the texts used in the component, all the properties are optional and strings.</p><table class=\"table table-bordered\"><thead><tr><td>Name</td><td>Default value</td><td>Use</td></tr></thead><tbody><tr><td>optionNames</td><td>'items'</td><td>Used in the dropdown-toggle to indicate what needs to be selected.</td></tr></tbody></table></div><div><h3>Keyboard controls</h3><p>The component offers some basic keyboard controls:<ul><li>Navigate between options with arrow keys</li><li>Selecting options using Enter</li><li>Closing dropdown using Escape</li></ul></p></div></div></section>"),t.put("app/component/option-row/option-row.template.html",'<li ng-if=$ctrl.shouldBeVisible()><div class=option ng-class="[\r\n				{\'folder\': $ctrl.isFolder()},\r\n			 ]"><div class=title><span ng-if=$ctrl.isSelected() ng-class=$ctrl.settings.selectedClass></span> <span ng-if=$ctrl.isFolder() ng-click=$ctrl.toggleFolder() ng-class="$ctrl.isOpen ? $ctrl.settings.folderClass : $ctrl.settings.folderClosedClass"></span> <span ng-if=!$ctrl.isFolder() ng-class=$ctrl.settings.childClass></span><label tabindex=-1 ng-click="(!$ctrl.isFolder() || $ctrl.settings.folderSelectable) && $ctrl.innerClicked({innerOption: $ctrl.option})" ng-keydown=$ctrl.keyDown($event)>{{$ctrl.getDisplayText()}}</label></div><ul class=children ng-if="$ctrl.isFolder() && $ctrl.isOpen"><dropdown-tree-option-row ng-repeat="option in $ctrl.getChildOptions() track by $index" option=option settings=$ctrl.settings option-clicked="$ctrl.innerClicked({innerOption: option})" selected-options=$ctrl.selectedOptions focus-next=$ctrl.focusNext() focus-previous=$ctrl.focusPrevious() catch-keydown=$ctrl.catchKeydown(event) search-text={{$ctrl.searchText}}></dropdown-tree-option-row></ul></div></li>')}]);
//# sourceMappingURL=../maps/scripts/app.js.map
